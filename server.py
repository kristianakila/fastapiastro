import os
import secrets
import requests
import hashlib
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://astf.vercel.app"],  # –¢–æ–ª—å–∫–æ –≤–∞—à –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TERMINAL_KEY = os.getenv("TERMINAL_KEY", "1691507148627DEMO")
SECRET_KEY = os.getenv("SECRET_KEY")

if not SECRET_KEY:
    raise RuntimeError("SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

class PaymentRequest(BaseModel):
    orderId: str
    amount: int
    description: str
    email: str

def generate_token(data: dict) -> str:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: –≤—Å–µ –ø–æ–ª—è + Password, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É
    data_with_password = {**data, "Password": SECRET_KEY}
    token_string = ''.join(str(v) for _, v in sorted(data_with_password.items()))
    return hashlib.sha256(token_string.encode('utf-8')).hexdigest()

@app.post("/init-payment")
def init_payment(payload: PaymentRequest):
    data = {
        "TerminalKey": TERMINAL_KEY,
        "Amount": payload.amount,
        "OrderId": payload.orderId,
        "Description": payload.description,
        "CustomerEmail": payload.email,
    }
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    data["Token"] = generate_token(data)

    try:
        # ‚ö†Ô∏è –í–ê–ñ–ù–û: —É–±—Ä–∞–ª –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ URL!
        r = requests.post("https://securepay.tinkoff.ru/v2/Init", json=data, timeout=10)
        r.raise_for_status()
        return r.json()
    except requests.exceptions.RequestException as e:
        return {"success": False, "error": str(e)}

@app.post("/tinkoff-callback")
async def tinkoff_callback(payload: dict):
    received_token = payload.get("Token")
    if not received_token:
        return {"Success": False, "error": "No token"}

    # –£–±–∏—Ä–∞–µ–º Token –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ö–µ—à–∞
    payload_copy = payload.copy()
    payload_copy.pop("Token", None)

    expected_token = generate_token(payload_copy)

    # –ó–∞—â–∏—â—ë–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞)
    if not secrets.compare_digest(received_token, expected_token):
        return {"Success": False, "error": "Invalid token"}

    # –¢–µ–ø–µ—Ä—å –¥–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–º
    status = payload.get("Status")
    order_id = payload.get("OrderId")

    # üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É:
    # - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
    # - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
    # - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∏ —Ç.–¥.
    #
    # –ü—Ä–∏–º–µ—Ä:
    # if status == "CONFIRMED":
    #     await activate_subscription(order_id)

    return {"Success": True}
